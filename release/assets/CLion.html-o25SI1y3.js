import{_ as o,r as c,o as i,c as p,a as n,d as a,b as e,e as t}from"./app-DsB3-5_I.js";const l={},u=t('<img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109193927918.png" alt="image-20240109193927918" style="zoom:67%;"><h2 id="一、安装-clion" tabindex="-1"><a class="header-anchor" href="#一、安装-clion" aria-hidden="true">#</a> 一、安装 CLion</h2><p>CLion 是由 JetBrains 开发的一款跨平台的集成开发环境（IDE），专门为 C 和 C++ 语言设计。以下是关于 CLion 的一些主要特点：</p><ol><li><p><strong>跨平台支持</strong>：CLion 支持 Windows、macOS 和 Linux 操作系统，使得开发者可以在不同的平台上进行编程和调试。</p></li><li><p><strong>智能编辑</strong>：它提供了代码自动完成、重构和代码导航等智能编辑功能，这些功能可以帮助开发者提高编码效率。</p></li><li><p><strong>代码分析</strong>：CLion 内置了代码质量分析工具，可以实时检测代码中的各种错误和潜在问题。</p></li><li><p><strong>强大的调试器</strong>：集成了 GDB 或 LLDB 调试器，支持本地调试和远程调试，让开发者能够轻松地找到并修复代码中的错误。</p></li><li><p><strong>集成版本控制</strong>：支持 Git、Subversion、Mercurial 等多种版本控制系统，方便开发者进行代码管理。</p></li><li><p><strong>项目模板和构建系统支持</strong>：CLion 支持多种项目模板，并且与 CMake、Gradle 等构建系统集成，使得项目构建和管理变得更加容易。</p></li><li><p><strong>插件生态</strong>：JetBrains 提供了丰富的插件生态系统，开发者可以根据需要安装各种插件，扩展 IDE 的功能。</p></li><li><p><strong>多语言支持</strong>：除了 C 和 C++，CLion 还支持其他语言，如 Python、JavaScript 等，这为多语言项目提供了便利。</p></li></ol><p>CLion 是一个适用于专业开发者的强大工具，它通过提供高效的编码工具、强大的调试功能和多样的集成选项，极大地提高了 C/C++ 开发的效率和质量。</p><h2 id="_1-1-下载" tabindex="-1"><a class="header-anchor" href="#_1-1-下载" aria-hidden="true">#</a> 1.1 下载</h2>',6),r={href:"https://www.jetbrains.com/zh-cn/clion/download/#section=windows",target:"_blank",rel:"noopener noreferrer"},d=n("img",{src:"https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194011371.png",alt:"image-20240109194011371",style:{zoom:"67%"}},null,-1),m=n("h2",{id:"_1-2-安装激活",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-安装激活","aria-hidden":"true"},"#"),a(" 1.2 安装激活")],-1),k=n("p",null,"激活方式可采用:",-1),g={href:"https://zhuanlan.zhihu.com/p/676651672",target:"_blank",rel:"noopener noreferrer"},b=t('<img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194209215.png" alt="image-20240109194209215" style="zoom:67%;"><h2 id="_1-3-clion-启动" tabindex="-1"><a class="header-anchor" href="#_1-3-clion-启动" aria-hidden="true">#</a> 1.3 CLion 启动 !</h2><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194239101.png" alt="image-20240109194239101" style="zoom:67%;"><h2 id="二、配置" tabindex="-1"><a class="header-anchor" href="#二、配置" aria-hidden="true">#</a> 二、配置</h2>',4),h={href:"https://www.bilibili.com/video/BV1kM411X7uA/?spm_id_from=333.337.search-card.all.click&vd_source=9071a50b607525e6db8ba7b49bc960f5",target:"_blank",rel:"noopener noreferrer"},v=t(`<img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194446471.png" alt="image-20240109194446471" style="zoom:67%;"><h2 id="_2-1-c-项目的创建" tabindex="-1"><a class="header-anchor" href="#_2-1-c-项目的创建" aria-hidden="true">#</a> 2.1 C 项目的创建</h2><blockquote><p>汉化：Chinese (Simplified) Language Pack / 中文语言包</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194918868.png" alt="image-20240109194918868" style="zoom:67%;"><blockquote><p>作为学习使用我们一般采用 <strong>C99 标准</strong> 即可</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109194809203.png" alt="image-20240109194809203" style="zoom:67%;"><h2 id="_2-2-cmake-文件的配置" tabindex="-1"><a class="header-anchor" href="#_2-2-cmake-文件的配置" aria-hidden="true">#</a> 2.2 CMake 文件的配置</h2><blockquote><p>通常情况下在 CLion 中 <strong>一个工程默认只有一个 main 函数</strong>，但在学习阶段我们通常采用 <strong>一个工程中配置多个 main 函数</strong> 的方式来学习，我们可以通过配置 CMake 文件来达到这一目的。</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.27</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>qkxg_c_2022 C CXX<span class="token punctuation">)</span> <span class="token comment"># 修改为自己项目的名称 project(项目名称 C)</span>
<span class="token comment"># 设定 C 语言和 C++ 版本</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_STANDARD</span> <span class="token number">99</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment"># 设定构建运行路径，避免污染根目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">}</span>/.archive<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">}</span>/.library<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">}</span>/.runtime<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">}</span>/.path<span class="token punctuation">)</span>

<span class="token comment"># 遍历项目根目录下所有的 .c 文件，自动添加</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE files *.c **/*.c *.cpp **/*.cpp<span class="token punctuation">)</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span>file <span class="token punctuation">\${</span>files<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">string</span><span class="token punctuation">(</span>REGEX REPLACE <span class="token string">&quot;.+/(.+)\\\\..*&quot;</span> <span class="token string">&quot;\\\\1&quot;</span> exe <span class="token punctuation">\${</span>file<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>exe<span class="token punctuation">}</span> <span class="token punctuation">\${</span>file<span class="token punctuation">}</span>
<span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span>\\ \\ \\ \\ --\\ \\[<span class="token punctuation">\${</span>exe<span class="token punctuation">}</span>.c\\]\\ will\\ be\\ compiled\\ to\\ \\&#39;.runtime/<span class="token punctuation">\${</span>exe<span class="token punctuation">}</span>.exe\\&#39;<span class="token punctuation">)</span>
<span class="token keyword">endforeach</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置好后我们每次创建新的 C 文件仅需: 项目(右键) --&gt; 重新加载 CMake 项目即可</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109195026116.png" alt="image-20240109195026116" style="zoom:67%;"><blockquote><p>文件介绍</p></blockquote><ul><li>.archive</li><li>.runtime 运行环境</li><li>src 源代码</li></ul><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109195158140.png" alt="image-20240109195158140" style="zoom:67%;"><blockquote><p>注意事项：</p></blockquote><ul><li>源代码中 c 文件的名称即使位于不同级目录也不能相同 (最后要编译为 可执行文件（以文件名为可执行文件的名）因此不可以重复)</li></ul><h2 id="_2-3-c-文件模板配置" tabindex="-1"><a class="header-anchor" href="#_2-3-c-文件模板配置" aria-hidden="true">#</a> 2.3 C 文件模板配置</h2><blockquote><p>CLion 默认创建文件时 .cpp 是其首选项我们可以通过下面的配置来使得 .c 为首选项</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109195809769.png" alt="image-20240109195809769" style="zoom:67%;"><blockquote><p>默认 .c 文件模板,我们可以通过配置文件模板的方式来让编译器生成的文件包含默认指定的内容</p></blockquote><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109195557783.png" alt="image-20240109195557783" loading="lazy"></p><p>这样我们新创建的 .c 文件便会自动生成下面的内容，其中 <code>$NAME</code> 用于替换文件名</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

\\#include <span class="token string">&quot;../common/cbq.h&quot;</span>

<span class="token comment">/**
 * @author caobaoqi
 * @name \${NAME}
 * @date \${DATE} \${TIME}
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;\${NAME}_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;\${NAME}_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span><span class="token function">_demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;\${NAME}_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;\${NAME}_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-编写常用头文件" tabindex="-1"><a class="header-anchor" href="#_2-4-编写常用头文件" aria-hidden="true">#</a> 2.4 编写常用头文件</h2><blockquote><p>我们可以通过头文件的方式引入常用的功能</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109200215808.png" alt="image-20240109200215808" style="zoom:67%;"><div class="language-c" data-ext="c"><pre class="language-c"><code>TODO
</code></pre></div><h2 id="_2-5-main-函数模板配置" tabindex="-1"><a class="header-anchor" href="#_2-5-main-函数模板配置" aria-hidden="true">#</a> 2.5 main 函数模板配置</h2><blockquote><p>CLion 中默认情况没有默认的 main 模板</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109200028507.png" alt="image-20240109200028507" style="zoom:67%;"><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../common/cbq.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109200300286.png" alt="image-20240109200300286" loading="lazy"></p><div class="language-c" data-ext="c"><pre class="language-c"><code>TODO
</code></pre></div><p>这样我们便可以在 c 文件中通过 <code>main </code> 和 <code>func </code> 的方式快速生成相应的模板</p><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109200422998.png" alt="image-20240109200422998" loading="lazy"></p><h2 id="三、插件安装" tabindex="-1"><a class="header-anchor" href="#三、插件安装" aria-hidden="true">#</a> 三、插件安装</h2><h2 id="_3-1-ikun-progress" tabindex="-1"><a class="header-anchor" href="#_3-1-ikun-progress" aria-hidden="true">#</a> 3.1 Ikun Progress</h2><blockquote><p>你干嘛 ~，哎呦 ！ --&gt; 你是 IKun 吗 ? 🐔🐔🐔</p></blockquote><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121606831.png" alt="image-20240110121606831" loading="lazy"></p><h2 id="_3-2-better-higlights" tabindex="-1"><a class="header-anchor" href="#_3-2-better-higlights" aria-hidden="true">#</a> 3.2 Better Higlights</h2><blockquote><p>提供彩色注释</p></blockquote><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121335456.png" alt="image-20240110121335456" style="zoom:67%;"><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121350713.png" alt="image-20240110121350713" loading="lazy"></p><h2 id="_3-3-codeglance-pro" tabindex="-1"><a class="header-anchor" href="#_3-3-codeglance-pro" aria-hidden="true">#</a> 3.3 CodeGlance Pro</h2><blockquote><p>代码缩略图，便于快速定位代码</p></blockquote><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121456174.png" alt="image-20240110121456174" loading="lazy"></p><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121514978.png" alt="image-20240110121514978" loading="lazy"></p><h2 id="_3-4-atom-material-icons" tabindex="-1"><a class="header-anchor" href="#_3-4-atom-material-icons" aria-hidden="true">#</a> 3.4 Atom Material Icons</h2><blockquote><p>文件图标</p></blockquote><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121733866.png" alt="image-20240110121733866" loading="lazy"></p><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121750733.png" alt="image-20240110121750733" loading="lazy"></p><h2 id="_3-5-rainbow-brackets" tabindex="-1"><a class="header-anchor" href="#_3-5-rainbow-brackets" aria-hidden="true">#</a> 3.5 Rainbow Brackets</h2><blockquote><p>彩虹括号</p></blockquote><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121814917.png" alt="image-20240110121814917" loading="lazy"></p><p><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110121828608.png" alt="image-20240110121828608" loading="lazy"></p>`,55);function q(_,y){const s=c("ExternalLinkIcon");return i(),p("div",null,[u,n("blockquote",null,[n("ul",null,[n("li",null,[a("Link: "),n("a",r,[a("Download-CLion"),e(s)])])])]),d,m,n("blockquote",null,[k,n("ul",null,[n("li",null,[a("学生授权方式 (参见："),n("a",g,[a("Jetbrains 学生授权"),e(s)]),a(")")])])]),b,n("blockquote",null,[n("p",null,[a("此部分配置参考自："),n("a",h,[a("哔哩哔哩 Up-卡姆姬-CLion安装流程与注意事项"),e(s)])])]),v])}const f=o(l,[["render",q],["__file","CLion.html.vue"]]);export{f as default};
